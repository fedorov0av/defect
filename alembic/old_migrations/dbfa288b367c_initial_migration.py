"""Initial migration

Revision ID: dbfa288b367c
Revises: 
Create Date: 2024-02-07 16:20:44.979146

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'dbfa288b367c'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user')
    op.drop_table('history')
    op.drop_table('role')
    op.drop_table('system')
    op.drop_table('defect')
    op.drop_table('status_defect')
    op.drop_table('type_defect')
    op.drop_table('user_role_table')
    op.drop_table('division')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('division',
    sa.Column('division_id', sa.INTEGER(), server_default=sa.text("nextval('division_division_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('division_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('division_id', name='division_pkey'),
    sa.UniqueConstraint('division_name', name='division_division_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('user_role_table',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['role.role_id'], name='user_role_table_role_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['user.user_id'], name='user_role_table_user_id_fkey')
    )
    op.create_table('type_defect',
    sa.Column('type_defect_id', sa.INTEGER(), server_default=sa.text("nextval('type_defect_type_defect_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('type_defect_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('type_defect_id', name='type_defect_pkey'),
    sa.UniqueConstraint('type_defect_name', name='type_defect_type_defect_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('status_defect',
    sa.Column('status_defect_id', sa.INTEGER(), server_default=sa.text("nextval('status_defect_status_defect_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('status_defect_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('status_defect_id', name='status_defect_pkey'),
    sa.UniqueConstraint('status_defect_name', name='status_defect_status_defect_name_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('defect',
    sa.Column('defect_id', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('defect_created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('defect_registrator_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('defect_owner_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('defect_repair_manager_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('defect_worker_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('defect_checker_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('defect_planned_finish_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('defect_ppr', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('defect_description', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('defect_check_result', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('defect_work_comment', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('defect_location', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('defect_type_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('defect_status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('defect_division_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('defect_system_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['defect_checker_id'], ['user.user_id'], name='defect_defect_checker_id_fkey'),
    sa.ForeignKeyConstraint(['defect_division_id'], ['division.division_id'], name='defect_defect_division_id_fkey'),
    sa.ForeignKeyConstraint(['defect_owner_id'], ['user.user_id'], name='defect_defect_owner_id_fkey'),
    sa.ForeignKeyConstraint(['defect_registrator_id'], ['user.user_id'], name='defect_defect_registrator_id_fkey'),
    sa.ForeignKeyConstraint(['defect_repair_manager_id'], ['user.user_id'], name='defect_defect_repair_manager_id_fkey'),
    sa.ForeignKeyConstraint(['defect_status_id'], ['status_defect.status_defect_id'], name='defect_defect_status_id_fkey'),
    sa.ForeignKeyConstraint(['defect_system_id'], ['system.system_id'], name='defect_defect_system_id_fkey'),
    sa.ForeignKeyConstraint(['defect_type_id'], ['type_defect.type_defect_id'], name='defect_defect_type_id_fkey'),
    sa.ForeignKeyConstraint(['defect_worker_id'], ['user.user_id'], name='defect_defect_worker_id_fkey'),
    sa.PrimaryKeyConstraint('defect_id', name='defect_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('system',
    sa.Column('system_id', sa.INTEGER(), server_default=sa.text("nextval('system_system_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('system_name', sa.VARCHAR(length=150), autoincrement=False, nullable=False),
    sa.Column('system_kks', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('system_created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('system_id', name='system_pkey'),
    sa.UniqueConstraint('system_kks', name='system_system_kks_key'),
    postgresql_ignore_search_path=False
    )
    op.create_table('role',
    sa.Column('role_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('role_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('role_id', name='role_pkey'),
    sa.UniqueConstraint('role_name', name='role_role_name_key')
    )
    op.create_table('history',
    sa.Column('history_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('history_defect_id', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('history_user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('history_status_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('history_comment', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('history_created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['history_defect_id'], ['defect.defect_id'], name='history_history_defect_id_fkey'),
    sa.ForeignKeyConstraint(['history_status_id'], ['status_defect.status_defect_id'], name='history_history_status_id_fkey'),
    sa.ForeignKeyConstraint(['history_user_id'], ['user.user_id'], name='history_history_user_id_fkey'),
    sa.PrimaryKeyConstraint('history_id', name='history_pkey')
    )
    op.create_table('user',
    sa.Column('user_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_fathername', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('user_surname', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_position', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_division_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_password_hash', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('user_salt_for_password', sa.VARCHAR(length=60), autoincrement=False, nullable=False),
    sa.Column('user_temp_password', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('user_email', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('user_created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['user_division_id'], ['division.division_id'], name='user_user_division_id_fkey'),
    sa.PrimaryKeyConstraint('user_id', name='user_pkey'),
    sa.UniqueConstraint('user_email', name='user_user_email_key')
    )
    # ### end Alembic commands ###
